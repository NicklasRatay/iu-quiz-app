CREATE TABLE public.question (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_status_id BIGINT NOT NULL REFERENCES public.question_status(id) ON DELETE CASCADE,
    question TEXT NOT NULL,
    hint TEXT
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'question');
END $$;

ALTER TABLE public.question ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated teachers and students" ON public.question FOR SELECT TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.question FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated teachers and owners" ON public.question FOR UPDATE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR created_by = (SELECT auth.uid()));
CREATE POLICY "Enable delete for authenticated teachers and owners" ON public.question FOR DELETE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR created_by = (SELECT auth.uid()));

CREATE TABLE public.answer_option (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_id BIGINT NOT NULL REFERENCES public.question(id) ON DELETE CASCADE, 
    answer TEXT NOT NULL,
    is_correct BOOLEAN NOT NULL,
    justification TEXT
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'answer_option');
END $$;

ALTER TABLE public.answer_option ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated teachers and students" ON public.answer_option FOR SELECT TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.answer_option FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated teachers and owners" ON public.answer_option FOR UPDATE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR created_by = (SELECT auth.uid()));
CREATE POLICY "Enable delete for authenticated teachers and owners" ON public.answer_option FOR DELETE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR created_by = (SELECT auth.uid()));


CREATE TABLE public.marked_question (
    user_id UUID REFERENCES public.profile(user_id) ON DELETE CASCADE,
    question_id BIGINT REFERENCES public.question(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, question_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'marked_question');
END $$;

ALTER TABLE public.marked_question ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated owners" ON public.marked_question FOR SELECT TO authenticated USING (user_id = (SELECT auth.uid()));
CREATE POLICY "Enable insert for authenticated owners" ON public.marked_question FOR INSERT TO authenticated WITH CHECK (user_id = (SELECT auth.uid()));
CREATE POLICY "Enable delete for authenticated owners" ON public.marked_question FOR DELETE TO authenticated USING (user_id = (SELECT auth.uid()));


CREATE TABLE public.question_category (
    question_id BIGINT REFERENCES public.question(id) ON DELETE CASCADE,
    category_id BIGINT REFERENCES public.category(id) ON DELETE CASCADE,
    PRIMARY KEY (question_id, category_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'question_category');
END $$;

ALTER TABLE public.question_category ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated teachers and students" ON public.question_category FOR SELECT TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated teachers and students" ON public.question_category FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated teachers and students" ON public.question_category FOR DELETE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));


CREATE TABLE public.question_course (
    question_id BIGINT REFERENCES public.question(id) ON DELETE CASCADE,
    course_id BIGINT REFERENCES public.course(id) ON DELETE CASCADE,
    PRIMARY KEY (question_id, course_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'question_course');
END $$;

ALTER TABLE public.question_course ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated teachers and students" ON public.question_course FOR SELECT TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated teachers and students" ON public.question_course FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated teachers and students" ON public.question_course FOR DELETE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));


CREATE TABLE public.quiz (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_type_id BIGINT NOT NULL REFERENCES public.quiz_type(id) ON DELETE CASCADE,
    quiz_status_id BIGINT NOT NULL REFERENCES public.quiz_status(id) ON DELETE CASCADE,
    seconds_per_question INT NOT NULL
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'quiz');
END $$;

ALTER TABLE public.quiz ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated students" ON public.quiz FOR SELECT TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.quiz FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated students" ON public.quiz FOR UPDATE TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated students" ON public.quiz FOR DELETE TO authenticated USING ((SELECT public.has_role('Studierend')));


CREATE TABLE public.quiz_question (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_id BIGINT NOT NULL REFERENCES public.quiz(id) ON DELETE CASCADE,
    question_id BIGINT NOT NULL REFERENCES public.question(id) ON DELETE CASCADE,
    order_number INT NOT NULL,
    UNIQUE (quiz_id, question_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'quiz_question');
END $$;

ALTER TABLE public.quiz_question ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated students" ON public.quiz_question FOR SELECT TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.quiz_question FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated students" ON public.quiz_question FOR UPDATE TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated students" ON public.quiz_question FOR DELETE TO authenticated USING ((SELECT public.has_role('Studierend')));


CREATE TABLE public.quiz_participant (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_id BIGINT NOT NULL REFERENCES public.quiz(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public.profile(user_id) ON DELETE CASCADE,
    UNIQUE (quiz_id, user_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'quiz_participant');
END $$;

ALTER TABLE public.quiz_participant ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated students" ON public.quiz_participant FOR SELECT TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.quiz_participant FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated students" ON public.quiz_participant FOR UPDATE TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated students" ON public.quiz_participant FOR DELETE TO authenticated USING ((SELECT public.has_role('Studierend')));


CREATE TABLE public.question_attempt (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    quiz_participant_id BIGINT NOT NULL REFERENCES public.quiz_participant(id) ON DELETE CASCADE,
    quiz_question_id BIGINT NOT NULL REFERENCES public.quiz_question(id) ON DELETE CASCADE,
    has_used_hint BOOLEAN NOT NULL,
    UNIQUE (quiz_participant_id, quiz_question_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'question_attempt');
END $$;

ALTER TABLE public.question_attempt ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated students" ON public.question_attempt FOR SELECT TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.question_attempt FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated students" ON public.question_attempt FOR UPDATE TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated students" ON public.question_attempt FOR DELETE TO authenticated USING ((SELECT public.has_role('Studierend')));

CREATE TABLE public.answer_attempt (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    question_attempt_id BIGINT NOT NULL REFERENCES public.question_attempt(id) ON DELETE CASCADE,
    answer_option_id BIGINT NOT NULL REFERENCES public.answer_option(id) ON DELETE CASCADE,
    is_selected_as_correct BOOLEAN NOT NULL,
    UNIQUE (question_attempt_id, answer_option_id)
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'answer_attempt');
END $$;

ALTER TABLE public.answer_attempt ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated students" ON public.answer_attempt FOR SELECT TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated students" ON public.answer_attempt FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated students" ON public.answer_attempt FOR UPDATE TO authenticated USING ((SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated students" ON public.answer_attempt FOR DELETE TO authenticated USING ((SELECT public.has_role('Studierend')));
