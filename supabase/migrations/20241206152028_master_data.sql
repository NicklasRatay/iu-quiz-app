CREATE TABLE public.category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'category');
END $$;

ALTER TABLE public.category ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated teachers and students" ON public.category FOR SELECT TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated teachers and students" ON public.category FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable update for authenticated teachers and students" ON public.category FOR UPDATE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable delete for authenticated teachers and students" ON public.category FOR DELETE TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));


CREATE TABLE public.course (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'course');
END $$;

ALTER TABLE public.course ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated teachers and students" ON public.course FOR SELECT TO authenticated USING ((SELECT public.has_role('Lehrperson')) OR (SELECT public.has_role('Studierend')));
CREATE POLICY "Enable insert for authenticated teachers" ON public.course FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Lehrperson')));
CREATE POLICY "Enable update for authenticated teachers" ON public.course FOR UPDATE TO authenticated USING ((SELECT public.has_role('Lehrperson')));
CREATE POLICY "Enable delete for authenticated teachers" ON public.course FOR DELETE TO authenticated USING ((SELECT public.has_role('Lehrperson')));


CREATE TABLE public.question_status (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

ALTER TABLE public.question_status ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated users" ON public.question_status FOR SELECT TO authenticated USING (TRUE);

INSERT INTO public.question_status (id, name) VALUES (1, 'Eingereicht');
INSERT INTO public.question_status (id, name) VALUES (2, 'Akzeptiert');
INSERT INTO public.question_status (id, name) VALUES (3, 'Abgelehnt');


CREATE TABLE public.quiz_status (
    id BIGINT PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

ALTER TABLE public.quiz_status ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated users" ON public.quiz_status FOR SELECT TO authenticated USING (TRUE);

INSERT INTO public.quiz_status (id, name) VALUES (1, 'Ausstehend');
INSERT INTO public.quiz_status (id, name) VALUES (2, 'Aktiv');
INSERT INTO public.quiz_status (id, name) VALUES (3, 'Abgeschlossen');


CREATE TABLE public.quiz_type (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

ALTER TABLE public.quiz_type ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated users" ON public.quiz_type FOR SELECT TO authenticated USING (TRUE);

INSERT INTO public.quiz_type (id, name) VALUES (1, 'Individuell');
INSERT INTO public.quiz_type (id, name) VALUES (2, 'Kooperativ');
INSERT INTO public.quiz_type (id, name) VALUES (3, 'Kompetitiv');
